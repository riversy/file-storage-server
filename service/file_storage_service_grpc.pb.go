// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: file_storage_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesServiceClient is the client API for FilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesServiceClient interface {
	PutFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileUploadStatus, error)
	GetAllFilesMeta(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (FilesService_GetAllFilesMetaClient, error)
	GetAllFilesMetaSync(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FileMetaList, error)
}

type filesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesServiceClient(cc grpc.ClientConnInterface) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) PutFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileUploadStatus, error) {
	out := new(FileUploadStatus)
	err := c.cc.Invoke(ctx, "/file_service.FilesService/PutFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) GetAllFilesMeta(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (FilesService_GetAllFilesMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesService_ServiceDesc.Streams[0], "/file_service.FilesService/GetAllFilesMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesServiceGetAllFilesMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesService_GetAllFilesMetaClient interface {
	Recv() (*FileMeta, error)
	grpc.ClientStream
}

type filesServiceGetAllFilesMetaClient struct {
	grpc.ClientStream
}

func (x *filesServiceGetAllFilesMetaClient) Recv() (*FileMeta, error) {
	m := new(FileMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesServiceClient) GetAllFilesMetaSync(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FileMetaList, error) {
	out := new(FileMetaList)
	err := c.cc.Invoke(ctx, "/file_service.FilesService/GetAllFilesMetaSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServiceServer is the server API for FilesService service.
// All implementations must embed UnimplementedFilesServiceServer
// for forward compatibility
type FilesServiceServer interface {
	PutFile(context.Context, *File) (*FileUploadStatus, error)
	GetAllFilesMeta(*FilesRequest, FilesService_GetAllFilesMetaServer) error
	GetAllFilesMetaSync(context.Context, *FilesRequest) (*FileMetaList, error)
	mustEmbedUnimplementedFilesServiceServer()
}

// UnimplementedFilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServiceServer struct {
}

func (UnimplementedFilesServiceServer) PutFile(context.Context, *File) (*FileUploadStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedFilesServiceServer) GetAllFilesMeta(*FilesRequest, FilesService_GetAllFilesMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllFilesMeta not implemented")
}
func (UnimplementedFilesServiceServer) GetAllFilesMetaSync(context.Context, *FilesRequest) (*FileMetaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFilesMetaSync not implemented")
}
func (UnimplementedFilesServiceServer) mustEmbedUnimplementedFilesServiceServer() {}

// UnsafeFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServiceServer will
// result in compilation errors.
type UnsafeFilesServiceServer interface {
	mustEmbedUnimplementedFilesServiceServer()
}

func RegisterFilesServiceServer(s grpc.ServiceRegistrar, srv FilesServiceServer) {
	s.RegisterService(&FilesService_ServiceDesc, srv)
}

func _FilesService_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FilesService/PutFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).PutFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_GetAllFilesMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServiceServer).GetAllFilesMeta(m, &filesServiceGetAllFilesMetaServer{stream})
}

type FilesService_GetAllFilesMetaServer interface {
	Send(*FileMeta) error
	grpc.ServerStream
}

type filesServiceGetAllFilesMetaServer struct {
	grpc.ServerStream
}

func (x *filesServiceGetAllFilesMetaServer) Send(m *FileMeta) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesService_GetAllFilesMetaSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).GetAllFilesMetaSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FilesService/GetAllFilesMetaSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).GetAllFilesMetaSync(ctx, req.(*FilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesService_ServiceDesc is the grpc.ServiceDesc for FilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutFile",
			Handler:    _FilesService_PutFile_Handler,
		},
		{
			MethodName: "GetAllFilesMetaSync",
			Handler:    _FilesService_GetAllFilesMetaSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllFilesMeta",
			Handler:       _FilesService_GetAllFilesMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_storage_service.proto",
}
